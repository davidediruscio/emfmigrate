module PetriNet_2_XML;
create OUT : PNML from IN : PetriNetMM0;



helper context PetriNetMM0!Net def: totPlace() : String =
  self.places->select(e |
    e.oclIsTypeOf(PetriNetMM0!Place)
  ).size().toString();

helper context PetriNetMM0!Net def: totTransition() : String =
  self.transitions->select(e |
    e.oclIsTypeOf(PetriNetMM0!Transition)
  ).size().toString();

helper def: root : PNML!PNMLDocument =
  OclUndefined;

rule PNMLDocument {
  from
    s : PetriNetMM0!PetriNetModel
  to
    t : PNML!PNMLDocument (
      xmlns <- uri
    ),
    uri : PNML!URI (
      value <- 'http://www.informatik.hu-berlin.de/top/pnml/ptNetb'
    )
  do {
    thisModule.document <- t;
  }
}

rule Net {
  from
    s : PetriNetMM0!Net
  to
    t : PNML!NetElement (
      name <- name,
      document <- thisModule.document,
      contents <- s.places.union(s.transitions),
      type <- type_uri,
      id <- s.name
    ),
    name : PNML!Name (
      labels <- label
    ),
    label : PNML!Label (
      text <- s.name+' tot places:'+s.totPlace()+' and tot transitions:'+s.totTransition()
    ),
    type_uri : PNML!URI (
      value <- 'http://www.informatik.hu-berlin.de/top/pntd/ptNetb'
    )
  do {
    thisModule.document.nets <- t;
  }
}


helper context PetriNetMM0!Place def: isContained(t:PetriNetMM0!Transition) :Boolean =
	if(self.dst->includes(t) and t.src->includes(self))then true else false endif
;
	
helper context PetriNetMM0!Transition def: isContained(t:PetriNetMM0!Place) :Boolean =
	if(self.dst->includes(t) and t.src->includes(self))then true else false endif
;
	
rule PlaceToTransition{
from p: PetriNetMM0!Place,
	t: PetriNetMM0!Transition (p.isContained(t) )
	to a: PNML!Arc(
		
     id <- p.name + '_to_' + t.name,
      name <- a_name,
      net <- t.net,
      source <- p,
      target <- t
    )
	,
    a_name : PNML!Name (
      labels <- a_label
    ),
    a_label : PNML!Label (
      labeledElement <- a_name,
      text <- p.name + '_to_' + t.name
    )
	

}
rule TransitionToPlace{
from p: PetriNetMM0!Place,
	t: PetriNetMM0!Transition (t.isContained(p) )
	to a: PNML!Arc(
		
     id <- p.name + '_to_' + t.name,
      name <- a_name,
      net <- t.net,
      source <- p,
      target <- t
    )
	,
    a_name : PNML!Name (
      labels <- a_label
    ),
    a_label : PNML!Label (
      labeledElement <- a_name,
      text <- t.name + '_to_' + p.name
    )
	

}




rule Place {
  from
    s : PetriNetMM0!Place
    
  to
    t : PNML!Place (
      name <- name,
      id <- s.name + '_src:' + s.src.size().toString() + '_dst:' + s.dst.size().toString()
    ),
    name : PNML!Name,
    label : PNML!Label (
      text <- s.name + '_src:' + s.src.size().toString() + '_dst:' + s.dst.size().toString(),
      labeledElement <- name
    )
}

rule Transitions {
  from
    s : PetriNetMM0!Transition
  to
    t : PNML!Transition (
      name <- name,
      id <- s.name + '_dst:' + s.dst.size().toString()
    ),
    name : PNML!Name,
    label : PNML!Label (
      text <- s.name + '_dst:' + s.dst.size().toString(),
      labeledElement <- name
    )

}
