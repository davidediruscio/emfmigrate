grammar it.univaq.coevolution.Migration with org.eclipse.xtext.common.Terminals

generate migration "http://www.univaq.it/coevolution/Migration"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "/it.univaq.coevolution.migration/src/it/univaq/coevolution/ATL.ecore" as atl


Model :

(packages+=PackageOp*)
|
("Library" title=STRING "{"
(operators+=ComplexOperator*)
"}")
|
(MigrationProgr=MigrationProgram)
;
/////////////////////////EDELTA grammar//////////////////////////////
/////////////////////package setters////////////////////////////////////
//packageSetters:set=setNsUri|set=setNsPrefix;
packageSetters:"set" metafeature=[ecore::EStructuralFeature] ":=" (value=STRING| valueRef+=[ecore::EObject]) ( "," valueRef+=[ecore::EObject])*";";

//packageSetters_def:set=setNsUri_def|set=setNsPrefix_def;

packageSetters_def:"set" metafeature=[ecore::EStructuralFeature] ":=""STRING" par=ID ";";



setNsUri:op="setNsUri("nsURI=STRING");";
setNsUri_def:op="setNsUri(" "STRING" nsUri=ID ");";
setNsPrefix:op="setNsPrefix("nsPrefix=STRING");";
setNsPrefix_def:op="setNsPrefix(" "STRING" nsPrefix=ID");";

////////////////////package operations////////////////////////

//Op:PackageOp|ClassOp|AttributeOp|ReferenceOp;


CHANGEPACKAGE:op="changePackage("ref=[ecore::EPackage] ")";


ADDPACKAGE:op="addPackage(" new=STRING ")";
//ADDPACKAGE_DEF:"addPackage(" ref+=Package ")";


DELETEPACKAGE:op="deletePackage(" ref=[ecore::EPackage]")";
//DELETEPACKAGE_DEF:"deletePackage(package "ref+=Package")";



PackageOp:
("package" var=Package "=")
(
((op=CHANGEPACKAGE
|
op=ADDPACKAGE
|
op=DELETEPACKAGE)

(
("{"
(
(setters+=packageSetters|classes+=ClassOp)*
)*
"}")|";"))|complex+=CallOperator)
;

OpDef:
((opdef=("changePackage("|"addPackage("|"deletePackage(")  ( ref=Package ":package"")")
(
("{"
(
(settersdef+=packageSetters_def
//|classes+=ClassOp_def
)*
)*
"}")|";"))|complex+=ComplexOperator)|
(opdef=("changeClass("|"addClass("|"deleteClass(") ref=Class ":class" ")"

(
("{"
 (settersdef+=classSetters_def
 //|attributes+= AttributeOp|references+=ReferenceOp
 )*
"}")|";")
//|complex+=ComplexOperator
)|
((( (("changeAttribute(" ref=Attribute ":attribute" )|("addAttribute" '('  ref=Attribute ":attribute" )|("deleteAttribute(" ref=Attribute ":attribute" ) |("renameAttribute(" ref= Attribute ":attribute"  ","  string=STRING ":string" ) |("moveAttribute("  ref=Attribute ":attribute" ","  dst= Class ":class") )')')
|
( (("changeReference(" ref= Reference ":reference")| ("addReference("  ref=Reference ":reference")|("deleteReference("  ref=Reference ":reference")|("moveReference("  ref=Reference ":reference" ","  dst= Class ":class") )  ")" )
)(";"|"{"
FeatureSettersdef+=featureSetters_def*
"}"))
;




 Package returns ecore::EPackage:
//'(' 
{Package}
	name=ID


;
/////////////////class operations/////////////////

//"{"
//(('setSuperTypes' '(' eSuperTypes+=[ecore::EClass] ( "," eSuperTypes+=[ecore::EClass])* ');' )? &
// ("setAbstract("abstract=EBoolean");")? )       
//( (eAttributeOperations+=AttributeOp|eReferenceOperations+=ReferenceOp) ( "," (eAttributeOperations+=AttributeOp|eReferenceOperations+=ReferenceOp))* )*
//    
//"}"



CHANGECLASS:op="changeClass(" ref=[ecore::EClass]")";


ADDCLASS:op="addClass("new=STRING ")";


DELETECLASS:op="deleteClass(" ref=[ecore::EClass]")";


//classSetters:set=setAbstract|set=setSuperTypes|set=setClassName;
classSetter: "set" metafeature=[ecore::EStructuralFeature] ":=" (value=STRING| valueRef+=[ecore::EObject]) ( "," valueRef+=[ecore::EObject])*";";
classSetters_def: "set" metafeature=[ecore::EStructuralFeature] ":=" par+=Parameter ("," par+=Parameter)* ";" ;
//(type="STRING" par=ID| typeEcore+=[ecore::EDataType] par=ID) ( "," typeEcore+=[ecore::EDataType] par=ID)*";";



//classSetters_def:setAbstract_def|setSuperTypes_def|setClassName_def;

//setSuperTypes:op='setSuperTypes' '(' eSuperTypes+=[ecore::EClass] ( "," eSuperTypes+=[ecore::EClass])* ');';
//setSuperTypes_def:op='setSuperTypes' '(' 'list' eSuperTypes+=ID  ');';
//
//
//setAbstract :op="setAbstract("abstract=EBoolean");" ; 
// setAbstract_def:op="setAbstract(" "boolean" abstract=ID");" ;
// 
//setClassName :op="setName("name=STRING");";
//setClassName_def:op="setName(" "string" name=ID");";


ClassOp:
("class" var=Class "=")
//changed from change_op
((op=CHANGECLASS
|
op=ADDCLASS
|
op=DELETECLASS)
(
("{"
 (setters+=classSetter|attributes+= AttributeOp|references+=ReferenceOp)*
"}")|";")|complex+=CallOperator)

;



Class returns ecore::EClass:    
     {Class}  name=ID 
   ;
Classifier returns ecore::EClassifier: 
{Classifier} name=ID;

/////////////////////eStructuralFeature///////////
eStructuralFeatureOp: AttributeOp|ReferenceOp;

CHANGEATTRIBUTE:"changeAttribute(" refAttr= [ecore::EAttribute]")";
ADDATTRIBUTE:"addAttribute" '(' new=EString ')';
DELETEATTRIBUTE:"deleteAttribute(" refAttr=[ecore::EAttribute];
RENAMEATTRIBUTE:"renameAttribute("refAttr= [ecore::EAttribute]","newName=STRING")";
MOVEATTRIBUTE:"moveAttribute(" refAttr=[ecore::EAttribute]"," dst= [ecore::EClass]")";

//FeatureSetters:setLower|setUpper|setType|setOpposite|setOwner|setName;
FeatureSetters:"set" metafeature=[ecore::EStructuralFeature] ":=" (valueEString=STRING|valueEInt=EInt|valueEBool=EBoolean| valueRef+=[ecore::EObject]("."valueFeature=[ecore::EStructuralFeature])?) ( "," valueRef+=[ecore::EObject])*";";


AttributeOp :
("attribute" var=Attribute "=")
((
(op=CHANGEATTRIBUTE|
op=ADDATTRIBUTE|
op=DELETEATTRIBUTE|
op=RENAMEATTRIBUTE|
op=MOVEATTRIBUTE)(('{' setters+=FeatureSetters* '}')|";"))|complex+=CallOperator)


;

Attribute returns ecore::EAttribute:  
      {Attribute}
    name=ID   ;

CHANGEREFERENCE:"changeReference("refRef= [ecore::EReference]")";
ADDREFERENCE:"addReference("new=EString ')';
DELETEREFERENCE:"deleteReference("  refRef=[ecore::EReference]")";
MOVEREFERENCE:"moveReference(" refRef=[ecore::EReference]"," dst= [ecore::EClass]")";
    
featureSetters_def:( ('setLowerBound(' lowerBound=EInt ":int")| ('setUpperBound(' lowerBound=EInt ":int")|('setType(' eType=Classifier":classifier")|('setOpposite(' opposite=Reference":reference")|('setOwner(' opposite=Class":class")|("setName("name=EString":string") )");";
 
ReferenceOp :
( "reference" var=Reference "=")
((
(CHANGE_op=CHANGEREFERENCE|
op=ADDREFERENCE|
op=DELETEREFERENCE|
op=MOVEREFERENCE)(('{' setters+=FeatureSetters* '}')|";"))|complex+=CallOperator)

;

Reference returns ecore::EReference:  
 {Reference}
  name= ID 
    
  ;
/////////////////////////////////////////


EString returns ecore::EString: 
  STRING|ID ;


EBoolean returns ecore::EBoolean:

    'true' | 'false';

EInt returns ecore::EInt:
   ( '-'? INT);

////////////////complex operators//////////////////////////

ComplexOperator:'def change' name=ID ('(' (params+=Parameter)? (',' params+=Parameter)* ')') "{"
 (classOperations+=ClassOp|attributeOperations+=AttributeOp|referenceOperations+=ReferenceOp)*
 "}";
 
 Parameter returns ecore::EObject :
 EReferencePar|EAttributePar|EClassPar|EPackagePar|EStringPar|EBoolPar|EIntPar
 //name=ID ":" type=[ecore::EClassifier] 
 //"class" Class|"attribute" Attribute|"reference" Reference|"string" EString|"int" EInt |"bool" EBoolean
;
 EReferencePar returns ecore::EReference: {EReferencePar} name=ID ":" "Reference";
 EAttributePar returns ecore::EAttribute: {EAttributePar} name=ID ":" "Attribute";
 EClassPar returns ecore::EClass:{EClassPar} name=ID ":" "Class";
 EPackagePar returns ecore::EPackage :{EPackagePar} name=ID ":" "Package";
 EIntPar returns  INT: name=ID ":" "Int";
 EStringPar returns STRING: name=ID ":" "String";
 EBoolPar  :name=ID ":" "Bool";
 
/////////call complex operator//////////////////////
CallOperator: fun=[ComplexOperator]"("  (args+=Argument)? (',' args+=Argument)* ");";
 
Argument:{Argument}arg=[ecore::EObject]|STRING|INT
;

//////////////////////////////ATLMigration////////////////////////////////
MigrationProgram:
("include" libs+=STRING";")*
migr="migrate" "transformation" path=STRING ":" ((transformationPackage+=[ecore::EPackage]) (","transformationPackage+=[ecore::EPackage])) "with" delta=STRING "{"
rules+=Rule*
"}"
;
Rule:"rule" name=ID 
"["
filter=(OpDef)
"]"
"{"
rewritingRules+=(RewritingRule)*

"}"
;

RewritingRule:(migratorsSX+=MigratorSX "->" migratorDX+=MigratorDX) ("&"migratorSX+=MigratorSX "->" migratorDX+=MigratorDX)* ";";

MigratorSX:"<"elementSX=[ecore::EClass] name=ID">" "["(filterSX+=FilterMigrator) ("&" filterSX+=FilterMigrator)*"]" ;

MigratorDX:("<"elementDX=[ecore::EClass] name=ID">" "["(filterDX+=FilterMigrator) ("&" filterDX+=FilterMigrator)*"]")|"null" ;




FilterMigrator: "#" (feature=[ecore::EStructuralFeature])("."internalFeature=[ecore::EStructuralFeature])? op=filterOperation  dxobj=[ecore::EObject] ("."dxgetters=[ecore::EStructuralFeature])?
;

filterOperation returns STRING:{STRING}operator=("="|"<>"|":="|"contains:");

