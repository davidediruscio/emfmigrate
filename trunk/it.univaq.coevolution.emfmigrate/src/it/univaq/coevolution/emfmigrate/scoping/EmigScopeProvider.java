/*
 * generated by Xtext
 */
package it.univaq.coevolution.emfmigrate.scoping;

import it.univaq.coevolution.emfmigrate.emig.*;


import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EcorePackage;

import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class EmigScopeProvider extends AbstractDeclarativeScopeProvider {
	public IScope scope_setterDef_metafeature(setterDef f, EReference r) {
		
		String type=f.eContainer().eClass().getName().substring(0, f.eContainer().eClass().getName().indexOf("OpDef"));

			List union=new ArrayList();
			EPackage p=EcorePackage.eINSTANCE;
			EClass  c=	(EClass) p.getEClassifier(type);
			for (EStructuralFeature feature : c.getEStructuralFeatures()) {
				
				union.add(feature);
			}
			addSupertypesSetters(union,c);
			
			return Scopes.scopeFor(union);
	}
	private void addSupertypesSetters(List union, EClass c) {
		// TODO Auto-generated method stub
		if(c.getESuperTypes().size()>0){
		for (EClass supertype : c.getESuperTypes()) {
			for (EStructuralFeature feature : supertype.getEStructuralFeatures()) {
				union.add(feature);
		}
			addSupertypesSetters(union, supertype);
		}
		}
	}
	public IScope scope_MigratorSX_elementSX(MigratorSX f, EReference r) {
		List union=new ArrayList();
		
		List<EPackage> list_packages=((MigrationProgram)f.eContainer().eContainer().eContainer()).getTransformationPackage();
		List<EClassifier> list_Ex = new ArrayList<EClassifier>();
		
		for(EPackage p : list_packages){
			union.addAll(p.getEClassifiers()
			);
		}
		
		
		return Scopes.scopeFor(union);
	}
	
	public IScope scope_MigratorDX_elementDX(MigratorDX f, EReference r) {
		List union=new ArrayList();
		List<EPackage> list_packages=((MigrationProgram)f.eContainer().eContainer().eContainer()).getTransformationPackage();
		List<EClassifier> list_Ex = new ArrayList<EClassifier>();
		
		for(EPackage p : list_packages){
			union.addAll(p.getEClassifiers()
			);
		}
		
		
		return Scopes.scopeFor(union);
	}

//public IScope scope_FilterMigrator_feature(FilterMigrator f, EReference r) {
//		
//	List union=new ArrayList();
//	if(f.eContainer() instanceof MigratorSX){
//	
//		EClass type=((MigratorSX)f.eContainer()).getElementSX().eClass();
//
//			
//		
//			
//			for (EStructuralFeature feature : type.getEStructuralFeatures()) {
//				
//				union.add(feature);
//			}
//			addSupertypesSetters(union,type);
//	}else{
//		//migratorDX
//		EClass type=((MigratorDX)f.eContainer()).getElementDX().eClass();
//
//		
//		for (EStructuralFeature feature : type.getEStructuralFeatures()) {
//			
//			union.add(feature);
//		}
//		addSupertypesSetters(union,type);
//	}
//			return Scopes.scopeFor(union);
//	}
	
public IScope scope_DotNavigationObjSX_obj(DotNavigationObjSX f, EReference r) {
	List union=new ArrayList();

	
	if(f.eContainer()instanceof FilterMigrator && f.eContainer().eContainer() instanceof MigratorSX){
		FilterMigrator filter=(FilterMigrator) f.eContainer();
		MigratorSX migrator=(MigratorSX) filter.eContainer();
		
		String nameappliedType=migrator.getElementSX().eClass().getName();
		
		EPackage p=EcorePackage.eINSTANCE;
		
		EClass  c=	(EClass) p.getEClassifier(nameappliedType);
		
		for (EStructuralFeature feature : c.getEStructuralFeatures()) {
			
			union.add(feature);
		}
		addSupertypesSetters(union,c);
		
		
}else{
	
	FilterMigrator filter=(FilterMigrator) f.eContainer();
	MigratorDX migrator=(MigratorDX) filter.eContainer();
	
	String nameappliedType=migrator.getElementDX().eClass().getName();
	
	EPackage p=EcorePackage.eINSTANCE;
	
	EClass  c=	(EClass) p.getEClassifier(nameappliedType);
	
	for (EStructuralFeature feature : c.getEStructuralFeatures()) {
		
		union.add(feature);
	}
	addSupertypesSetters(union,c);
		
	}

	
	return Scopes.scopeFor(union);
}
public IScope scope_DotNavigationObjSX_ref(DotNavigationObjSX f, EReference r) {
	List union=new ArrayList();
	
	
		String nameappliedType=f.getObj().eClass().getName();
		
		EPackage p=EcorePackage.eINSTANCE;
		
		EClass  c=	(EClass) p.getEClassifier(nameappliedType);
		
		for (EStructuralFeature feature : c.getEStructuralFeatures()) {
			
			union.add(feature);
		}
		addSupertypesSetters(union,c);
			
	return Scopes.scopeFor(union);
}
	
public IScope scope_DotNavigationObjDX_obj(DotNavigationObjSX f, EReference r) {
	
	IScope all = delegateGetScope(f, r);
	
	
	return all;
}
public IScope scope_DotNavigationObjDX_ref(DotNavigationObjDX f, EReference r) {
	List union=new ArrayList();
	
	
		String nameappliedType=f.getObj().eClass().getName();
		
		EPackage p=EcorePackage.eINSTANCE;
		
		EClass  c=	(EClass) p.getEClassifier('E'+nameappliedType);
		
		for (EStructuralFeature feature : c.getEStructuralFeatures()) {
			
			union.add(feature);
		}
		addSupertypesSetters(union,c);
			
	return Scopes.scopeFor(union);
}
}
