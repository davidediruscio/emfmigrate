/*
* generated by Xtext
*/

package it.univaq.coevolution.differences.edelta.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EDeltaLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cPackagesAlternatives_0 = (Alternatives)cPackagesAssignment.eContents().get(0);
		private final RuleCall cPackagesEPackageOperationParserRuleCall_0_0 = (RuleCall)cPackagesAlternatives_0.eContents().get(0);
		private final RuleCall cPackagesComplexOperatorDefParserRuleCall_0_1 = (RuleCall)cPackagesAlternatives_0.eContents().get(1);
		
		//Model:
		//	packages+=(EPackageOperation | ComplexOperatorDef)*;
		public ParserRule getRule() { return rule; }

		//packages+=(EPackageOperation | ComplexOperatorDef)*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//EPackageOperation | ComplexOperatorDef
		public Alternatives getPackagesAlternatives_0() { return cPackagesAlternatives_0; }

		//EPackageOperation
		public RuleCall getPackagesEPackageOperationParserRuleCall_0_0() { return cPackagesEPackageOperationParserRuleCall_0_0; }

		//ComplexOperatorDef
		public RuleCall getPackagesComplexOperatorDefParserRuleCall_0_1() { return cPackagesComplexOperatorDefParserRuleCall_0_1; }
	}

	public class EPackageOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EPackageOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarPackageParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0_0 = (Alternatives)cOpAssignment_1_0_0.eContents().get(0);
		private final RuleCall cOpChangePackageParserRuleCall_1_0_0_0_0 = (RuleCall)cOpAlternatives_1_0_0_0.eContents().get(0);
		private final RuleCall cOpAddPackageParserRuleCall_1_0_0_0_1 = (RuleCall)cOpAlternatives_1_0_0_0.eContents().get(1);
		private final RuleCall cOpDeletePackageParserRuleCall_1_0_0_0_2 = (RuleCall)cOpAlternatives_1_0_0_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Assignment cSettersAssignment_1_0_2_0 = (Assignment)cAlternatives_1_0_2.eContents().get(0);
		private final RuleCall cSettersSetterParserRuleCall_1_0_2_0_0 = (RuleCall)cSettersAssignment_1_0_2_0.eContents().get(0);
		private final Assignment cClassesAssignment_1_0_2_1 = (Assignment)cAlternatives_1_0_2.eContents().get(1);
		private final RuleCall cClassesEClassOperationParserRuleCall_1_0_2_1_0 = (RuleCall)cClassesAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cComplexAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cComplexComplexOperatorParserRuleCall_1_1_0 = (RuleCall)cComplexAssignment_1_1.eContents().get(0);
		
		//EPackageOperation:
		//	("package" var=Package "=")? (op=(ChangePackage | AddPackage | DeletePackage) "{" (setters+=setter |
		//	classes+=EClassOperation)* "}" | complex+=ComplexOperator);
		public ParserRule getRule() { return rule; }

		//("package" var=Package "=")? (op=(ChangePackage | AddPackage | DeletePackage) "{" (setters+=setter |
		//classes+=EClassOperation)* "}" | complex+=ComplexOperator)
		public Group getGroup() { return cGroup; }

		//("package" var=Package "=")?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//var=Package
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Package
		public RuleCall getVarPackageParserRuleCall_0_1_0() { return cVarPackageParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//op=(ChangePackage | AddPackage | DeletePackage) "{" (setters+=setter | classes+=EClassOperation)* "}" |
		//complex+=ComplexOperator
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//op=(ChangePackage | AddPackage | DeletePackage) "{" (setters+=setter | classes+=EClassOperation)* "}"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//op=(ChangePackage | AddPackage | DeletePackage)
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//ChangePackage | AddPackage | DeletePackage
		public Alternatives getOpAlternatives_1_0_0_0() { return cOpAlternatives_1_0_0_0; }

		//ChangePackage
		public RuleCall getOpChangePackageParserRuleCall_1_0_0_0_0() { return cOpChangePackageParserRuleCall_1_0_0_0_0; }

		//AddPackage
		public RuleCall getOpAddPackageParserRuleCall_1_0_0_0_1() { return cOpAddPackageParserRuleCall_1_0_0_0_1; }

		//DeletePackage
		public RuleCall getOpDeletePackageParserRuleCall_1_0_0_0_2() { return cOpDeletePackageParserRuleCall_1_0_0_0_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_1() { return cLeftCurlyBracketKeyword_1_0_1; }

		//(setters+=setter | classes+=EClassOperation)*
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }

		//setters+=setter
		public Assignment getSettersAssignment_1_0_2_0() { return cSettersAssignment_1_0_2_0; }

		//setter
		public RuleCall getSettersSetterParserRuleCall_1_0_2_0_0() { return cSettersSetterParserRuleCall_1_0_2_0_0; }

		//classes+=EClassOperation
		public Assignment getClassesAssignment_1_0_2_1() { return cClassesAssignment_1_0_2_1; }

		//EClassOperation
		public RuleCall getClassesEClassOperationParserRuleCall_1_0_2_1_0() { return cClassesEClassOperationParserRuleCall_1_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_3() { return cRightCurlyBracketKeyword_1_0_3; }

		//complex+=ComplexOperator
		public Assignment getComplexAssignment_1_1() { return cComplexAssignment_1_1; }

		//ComplexOperator
		public RuleCall getComplexComplexOperatorParserRuleCall_1_1_0() { return cComplexComplexOperatorParserRuleCall_1_1_0; }
	}

	public class DeletePackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeletePackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeletePackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefEPackageCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefEPackageIDTerminalRuleCall_2_0_1 = (RuleCall)cRefEPackageCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeletePackage:
		//	"deletePackage" "(" ref=[ecore::EPackage] ")";
		public ParserRule getRule() { return rule; }

		//"deletePackage" "(" ref=[ecore::EPackage] ")"
		public Group getGroup() { return cGroup; }

		//"deletePackage"
		public Keyword getDeletePackageKeyword_0() { return cDeletePackageKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=[ecore::EPackage]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[ecore::EPackage]
		public CrossReference getRefEPackageCrossReference_2_0() { return cRefEPackageCrossReference_2_0; }

		//ID
		public RuleCall getRefEPackageIDTerminalRuleCall_2_0_1() { return cRefEPackageIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AddPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNewAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNewSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cNewAssignment_2_0.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cRefSTRINGCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefSTRINGIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefSTRINGCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AddPackage:
		//	"addPackage" "(" (new=STRING | ref=[STRING]) ")";
		public ParserRule getRule() { return rule; }

		//"addPackage" "(" (new=STRING | ref=[STRING]) ")"
		public Group getGroup() { return cGroup; }

		//"addPackage"
		public Keyword getAddPackageKeyword_0() { return cAddPackageKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//new=STRING | ref=[STRING]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//new=STRING
		public Assignment getNewAssignment_2_0() { return cNewAssignment_2_0; }

		//STRING
		public RuleCall getNewSTRINGTerminalRuleCall_2_0_0() { return cNewSTRINGTerminalRuleCall_2_0_0; }

		//ref=[STRING]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }

		//[STRING]
		public CrossReference getRefSTRINGCrossReference_2_1_0() { return cRefSTRINGCrossReference_2_1_0; }

		//ID
		public RuleCall getRefSTRINGIDTerminalRuleCall_2_1_0_1() { return cRefSTRINGIDTerminalRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ChangePackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangePackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangePackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefEPackageCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefEPackageIDTerminalRuleCall_2_0_1 = (RuleCall)cRefEPackageCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChangePackage:
		//	"changePackage" "(" ref=[ecore::EPackage] ")";
		public ParserRule getRule() { return rule; }

		//"changePackage" "(" ref=[ecore::EPackage] ")"
		public Group getGroup() { return cGroup; }

		//"changePackage"
		public Keyword getChangePackageKeyword_0() { return cChangePackageKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=[ecore::EPackage]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[ecore::EPackage]
		public CrossReference getRefEPackageCrossReference_2_0() { return cRefEPackageCrossReference_2_0; }

		//ID
		public RuleCall getRefEPackageIDTerminalRuleCall_2_0_1() { return cRefEPackageIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Package returns ecore::EPackage:
		//	{Package} name=ID;
		public ParserRule getRule() { return rule; }

		//{Package} name=ID
		public Group getGroup() { return cGroup; }

		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EClassOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarClassParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cOpChangeClassParserRuleCall_1_0_0_0 = (RuleCall)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cOpAddClassParserRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cOpDeleteClassParserRuleCall_1_0_2_0 = (RuleCall)cOpAssignment_1_0_2.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Assignment cSettersAssignment_1_1_0_1_0 = (Assignment)cAlternatives_1_1_0_1.eContents().get(0);
		private final RuleCall cSettersSetterParserRuleCall_1_1_0_1_0_0 = (RuleCall)cSettersAssignment_1_1_0_1_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1_0_1_1 = (Assignment)cAlternatives_1_1_0_1.eContents().get(1);
		private final RuleCall cAttributesEAttributeOperationParserRuleCall_1_1_0_1_1_0 = (RuleCall)cAttributesAssignment_1_1_0_1_1.eContents().get(0);
		private final Assignment cReferencesAssignment_1_1_0_1_2 = (Assignment)cAlternatives_1_1_0_1.eContents().get(2);
		private final RuleCall cReferencesEReferenceOperationParserRuleCall_1_1_0_1_2_0 = (RuleCall)cReferencesAssignment_1_1_0_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_0_2 = (Keyword)cGroup_1_1_0.eContents().get(2);
		private final Assignment cComplexAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cComplexComplexOperatorParserRuleCall_1_1_1_0 = (RuleCall)cComplexAssignment_1_1_1.eContents().get(0);
		
		//EClassOperation:
		//	("class" var=Class "=")? ((op=ChangeClass | op=AddClass | op=DeleteClass) ("{" (setters+=setter |
		//	attributes+=EAttributeOperation | references+=EReferenceOperation)* "}" | complex+=ComplexOperator));
		public ParserRule getRule() { return rule; }

		//("class" var=Class "=")? ((op=ChangeClass | op=AddClass | op=DeleteClass) ("{" (setters+=setter |
		//attributes+=EAttributeOperation | references+=EReferenceOperation)* "}" | complex+=ComplexOperator))
		public Group getGroup() { return cGroup; }

		//("class" var=Class "=")?
		public Group getGroup_0() { return cGroup_0; }

		//"class"
		public Keyword getClassKeyword_0_0() { return cClassKeyword_0_0; }

		//var=Class
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Class
		public RuleCall getVarClassParserRuleCall_0_1_0() { return cVarClassParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//(op=ChangeClass | op=AddClass | op=DeleteClass) ("{" (setters+=setter | attributes+=EAttributeOperation |
		//references+=EReferenceOperation)* "}" | complex+=ComplexOperator)
		public Group getGroup_1() { return cGroup_1; }

		//op=ChangeClass | op=AddClass | op=DeleteClass
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//op=ChangeClass
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//ChangeClass
		public RuleCall getOpChangeClassParserRuleCall_1_0_0_0() { return cOpChangeClassParserRuleCall_1_0_0_0; }

		//op=AddClass
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//AddClass
		public RuleCall getOpAddClassParserRuleCall_1_0_1_0() { return cOpAddClassParserRuleCall_1_0_1_0; }

		//op=DeleteClass
		public Assignment getOpAssignment_1_0_2() { return cOpAssignment_1_0_2; }

		//DeleteClass
		public RuleCall getOpDeleteClassParserRuleCall_1_0_2_0() { return cOpDeleteClassParserRuleCall_1_0_2_0; }

		//"{" (setters+=setter | attributes+=EAttributeOperation | references+=EReferenceOperation)* "}" |
		//complex+=ComplexOperator
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"{" (setters+=setter | attributes+=EAttributeOperation | references+=EReferenceOperation)* "}"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0_0() { return cLeftCurlyBracketKeyword_1_1_0_0; }

		//(setters+=setter | attributes+=EAttributeOperation | references+=EReferenceOperation)*
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }

		//setters+=setter
		public Assignment getSettersAssignment_1_1_0_1_0() { return cSettersAssignment_1_1_0_1_0; }

		//setter
		public RuleCall getSettersSetterParserRuleCall_1_1_0_1_0_0() { return cSettersSetterParserRuleCall_1_1_0_1_0_0; }

		//attributes+=EAttributeOperation
		public Assignment getAttributesAssignment_1_1_0_1_1() { return cAttributesAssignment_1_1_0_1_1; }

		//EAttributeOperation
		public RuleCall getAttributesEAttributeOperationParserRuleCall_1_1_0_1_1_0() { return cAttributesEAttributeOperationParserRuleCall_1_1_0_1_1_0; }

		//references+=EReferenceOperation
		public Assignment getReferencesAssignment_1_1_0_1_2() { return cReferencesAssignment_1_1_0_1_2; }

		//EReferenceOperation
		public RuleCall getReferencesEReferenceOperationParserRuleCall_1_1_0_1_2_0() { return cReferencesEReferenceOperationParserRuleCall_1_1_0_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_0_2() { return cRightCurlyBracketKeyword_1_1_0_2; }

		//complex+=ComplexOperator
		public Assignment getComplexAssignment_1_1_1() { return cComplexAssignment_1_1_1; }

		//ComplexOperator
		public RuleCall getComplexComplexOperatorParserRuleCall_1_1_1_0() { return cComplexComplexOperatorParserRuleCall_1_1_1_0; }
	}

	public class ChangeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangeClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChangeClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpChangeClassKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefEClassCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefEClassIDTerminalRuleCall_2_0_1 = (RuleCall)cRefEClassCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChangeClass:
		//	{ChangeClass} op="changeClass(" ref=[ecore::EClass] ")";
		public ParserRule getRule() { return rule; }

		//{ChangeClass} op="changeClass(" ref=[ecore::EClass] ")"
		public Group getGroup() { return cGroup; }

		//{ChangeClass}
		public Action getChangeClassAction_0() { return cChangeClassAction_0; }

		//op="changeClass("
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"changeClass("
		public Keyword getOpChangeClassKeyword_1_0() { return cOpChangeClassKeyword_1_0; }

		//ref=[ecore::EClass]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[ecore::EClass]
		public CrossReference getRefEClassCrossReference_2_0() { return cRefEClassCrossReference_2_0; }

		//ID
		public RuleCall getRefEClassIDTerminalRuleCall_2_0_1() { return cRefEClassIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AddClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpAddClassKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNewAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNewSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cNewAssignment_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cRefSTRINGCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefSTRINGIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefSTRINGCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AddClass:
		//	op="addClass(" (new=STRING | ref=[STRING]) ")";
		public ParserRule getRule() { return rule; }

		//op="addClass(" (new=STRING | ref=[STRING]) ")"
		public Group getGroup() { return cGroup; }

		//op="addClass("
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"addClass("
		public Keyword getOpAddClassKeyword_0_0() { return cOpAddClassKeyword_0_0; }

		//new=STRING | ref=[STRING]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//new=STRING
		public Assignment getNewAssignment_1_0() { return cNewAssignment_1_0; }

		//STRING
		public RuleCall getNewSTRINGTerminalRuleCall_1_0_0() { return cNewSTRINGTerminalRuleCall_1_0_0; }

		//ref=[STRING]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//[STRING]
		public CrossReference getRefSTRINGCrossReference_1_1_0() { return cRefSTRINGCrossReference_1_1_0; }

		//ID
		public RuleCall getRefSTRINGIDTerminalRuleCall_1_1_0_1() { return cRefSTRINGIDTerminalRuleCall_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class DeleteClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpDeleteClassKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefEClassCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefEClassIDTerminalRuleCall_1_0_1 = (RuleCall)cRefEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteClass:
		//	op="deleteClass(" ref=[ecore::EClass] ")";
		public ParserRule getRule() { return rule; }

		//op="deleteClass(" ref=[ecore::EClass] ")"
		public Group getGroup() { return cGroup; }

		//op="deleteClass("
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"deleteClass("
		public Keyword getOpDeleteClassKeyword_0_0() { return cOpDeleteClassKeyword_0_0; }

		//ref=[ecore::EClass]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ecore::EClass]
		public CrossReference getRefEClassCrossReference_1_0() { return cRefEClassCrossReference_1_0; }

		//ID
		public RuleCall getRefEClassIDTerminalRuleCall_1_0_1() { return cRefEClassIDTerminalRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Class returns ecore::EClass:
		//	{Class} name=ID;
		public ParserRule getRule() { return rule; }

		//{Class} name=ID
		public Group getGroup() { return cGroup; }

		//{Class}
		public Action getClassAction_0() { return cClassAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class SetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "setter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetafeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetafeatureEStructuralFeatureCrossReference_1_0 = (CrossReference)cMetafeatureAssignment_1.eContents().get(0);
		private final RuleCall cMetafeatureEStructuralFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cMetafeatureEStructuralFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_2_0 = (Keyword)cOperatorAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cAlternatives_3.eContents().get(0);
		private final Assignment cValueAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0_0_0 = (RuleCall)cValueAssignment_3_0_0.eContents().get(0);
		private final RuleCall cBOOLTerminalRuleCall_3_0_1 = (RuleCall)cAlternatives_3_0.eContents().get(1);
		private final Assignment cCardAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cCardCardinalityParserRuleCall_3_1_0 = (RuleCall)cCardAssignment_3_1.eContents().get(0);
		private final Assignment cValueRefAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final CrossReference cValueRefEObjectCrossReference_3_2_0 = (CrossReference)cValueRefAssignment_3_2.eContents().get(0);
		private final RuleCall cValueRefEObjectIDTerminalRuleCall_3_2_0_1 = (RuleCall)cValueRefEObjectCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cValueRefEObjectCrossReference_4_1_0 = (CrossReference)cValueRefAssignment_4_1.eContents().get(0);
		private final RuleCall cValueRefEObjectIDTerminalRuleCall_4_1_0_1 = (RuleCall)cValueRefEObjectCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//setter:
		//	"set" metafeature=[ecore::EStructuralFeature] operator="<=" ((value=STRING | BOOL) | card=Cardinality |
		//	valueRef+=[ecore::EObject]) ("," valueRef+=[ecore::EObject])* ";";
		public ParserRule getRule() { return rule; }

		//"set" metafeature=[ecore::EStructuralFeature] operator="<=" ((value=STRING | BOOL) | card=Cardinality |
		//valueRef+=[ecore::EObject]) ("," valueRef+=[ecore::EObject])* ";"
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//metafeature=[ecore::EStructuralFeature]
		public Assignment getMetafeatureAssignment_1() { return cMetafeatureAssignment_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getMetafeatureEStructuralFeatureCrossReference_1_0() { return cMetafeatureEStructuralFeatureCrossReference_1_0; }

		//ID
		public RuleCall getMetafeatureEStructuralFeatureIDTerminalRuleCall_1_0_1() { return cMetafeatureEStructuralFeatureIDTerminalRuleCall_1_0_1; }

		//operator="<="
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_2_0() { return cOperatorLessThanSignEqualsSignKeyword_2_0; }

		//(value=STRING | BOOL) | card=Cardinality | valueRef+=[ecore::EObject]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//value=STRING | BOOL
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//value=STRING
		public Assignment getValueAssignment_3_0_0() { return cValueAssignment_3_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0_0_0() { return cValueSTRINGTerminalRuleCall_3_0_0_0; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_3_0_1() { return cBOOLTerminalRuleCall_3_0_1; }

		//card=Cardinality
		public Assignment getCardAssignment_3_1() { return cCardAssignment_3_1; }

		//Cardinality
		public RuleCall getCardCardinalityParserRuleCall_3_1_0() { return cCardCardinalityParserRuleCall_3_1_0; }

		//valueRef+=[ecore::EObject]
		public Assignment getValueRefAssignment_3_2() { return cValueRefAssignment_3_2; }

		//[ecore::EObject]
		public CrossReference getValueRefEObjectCrossReference_3_2_0() { return cValueRefEObjectCrossReference_3_2_0; }

		//ID
		public RuleCall getValueRefEObjectIDTerminalRuleCall_3_2_0_1() { return cValueRefEObjectIDTerminalRuleCall_3_2_0_1; }

		//("," valueRef+=[ecore::EObject])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//valueRef+=[ecore::EObject]
		public Assignment getValueRefAssignment_4_1() { return cValueRefAssignment_4_1; }

		//[ecore::EObject]
		public CrossReference getValueRefEObjectCrossReference_4_1_0() { return cValueRefEObjectCrossReference_4_1_0; }

		//ID
		public RuleCall getValueRefEObjectIDTerminalRuleCall_4_1_0_1() { return cValueRefEObjectIDTerminalRuleCall_4_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Cardinality returns ecore::EInt:
		//	INT | "*";
		public ParserRule getRule() { return rule; }

		//INT | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class EAttributeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EAttributeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarAttributeParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cOpChangeAttributeParserRuleCall_1_0_0_0_0 = (RuleCall)cOpAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cOpAddAttributeParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_2 = (Assignment)cAlternatives_1_0_0.eContents().get(2);
		private final RuleCall cOpDeleteAttributeParserRuleCall_1_0_0_2_0 = (RuleCall)cOpAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSettersAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSettersSetterParserRuleCall_1_0_1_1_0 = (RuleCall)cSettersAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Assignment cComplexAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cComplexComplexOperatorParserRuleCall_1_1_0 = (RuleCall)cComplexAssignment_1_1.eContents().get(0);
		
		//EAttributeOperation:
		//	("attribute" var=Attribute "=")? ((op=ChangeAttribute | op=AddAttribute | op=DeleteAttribute) ("{" setters+=setter*
		//	"}") | complex+=ComplexOperator);
		public ParserRule getRule() { return rule; }

		//("attribute" var=Attribute "=")? ((op=ChangeAttribute | op=AddAttribute | op=DeleteAttribute) ("{" setters+=setter* "}")
		//| complex+=ComplexOperator)
		public Group getGroup() { return cGroup; }

		//("attribute" var=Attribute "=")?
		public Group getGroup_0() { return cGroup_0; }

		//"attribute"
		public Keyword getAttributeKeyword_0_0() { return cAttributeKeyword_0_0; }

		//var=Attribute
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Attribute
		public RuleCall getVarAttributeParserRuleCall_0_1_0() { return cVarAttributeParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//(op=ChangeAttribute | op=AddAttribute | op=DeleteAttribute) ("{" setters+=setter* "}") | complex+=ComplexOperator
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//(op=ChangeAttribute | op=AddAttribute | op=DeleteAttribute) ("{" setters+=setter* "}")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//op=ChangeAttribute | op=AddAttribute | op=DeleteAttribute
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//op=ChangeAttribute
		public Assignment getOpAssignment_1_0_0_0() { return cOpAssignment_1_0_0_0; }

		//ChangeAttribute
		public RuleCall getOpChangeAttributeParserRuleCall_1_0_0_0_0() { return cOpChangeAttributeParserRuleCall_1_0_0_0_0; }

		//op=AddAttribute
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//AddAttribute
		public RuleCall getOpAddAttributeParserRuleCall_1_0_0_1_0() { return cOpAddAttributeParserRuleCall_1_0_0_1_0; }

		//op=DeleteAttribute
		public Assignment getOpAssignment_1_0_0_2() { return cOpAssignment_1_0_0_2; }

		//DeleteAttribute
		public RuleCall getOpDeleteAttributeParserRuleCall_1_0_0_2_0() { return cOpDeleteAttributeParserRuleCall_1_0_0_2_0; }

		//"{" setters+=setter* "}"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_1_0() { return cLeftCurlyBracketKeyword_1_0_1_0; }

		//setters+=setter*
		public Assignment getSettersAssignment_1_0_1_1() { return cSettersAssignment_1_0_1_1; }

		//setter
		public RuleCall getSettersSetterParserRuleCall_1_0_1_1_0() { return cSettersSetterParserRuleCall_1_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_1_2() { return cRightCurlyBracketKeyword_1_0_1_2; }

		//complex+=ComplexOperator
		public Assignment getComplexAssignment_1_1() { return cComplexAssignment_1_1; }

		//ComplexOperator
		public RuleCall getComplexComplexOperatorParserRuleCall_1_1_0() { return cComplexComplexOperatorParserRuleCall_1_1_0; }
	}

	public class ChangeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangeAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpChangeAttributeKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefEAttributeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefEAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cRefEAttributeCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ChangeAttribute:
		//	op="changeAttribute(" ref=[ecore::EAttribute] ")";
		public ParserRule getRule() { return rule; }

		//op="changeAttribute(" ref=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//op="changeAttribute("
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"changeAttribute("
		public Keyword getOpChangeAttributeKeyword_0_0() { return cOpChangeAttributeKeyword_0_0; }

		//ref=[ecore::EAttribute]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ecore::EAttribute]
		public CrossReference getRefEAttributeCrossReference_1_0() { return cRefEAttributeCrossReference_1_0; }

		//ID
		public RuleCall getRefEAttributeIDTerminalRuleCall_1_0_1() { return cRefEAttributeIDTerminalRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AddAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpAddAttributeKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNewAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNewSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cNewAssignment_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cRefSTRINGCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefSTRINGIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefSTRINGCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AddAttribute:
		//	op="addAttribute(" (new=STRING | ref=[STRING]) ")";
		public ParserRule getRule() { return rule; }

		//op="addAttribute(" (new=STRING | ref=[STRING]) ")"
		public Group getGroup() { return cGroup; }

		//op="addAttribute("
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"addAttribute("
		public Keyword getOpAddAttributeKeyword_0_0() { return cOpAddAttributeKeyword_0_0; }

		//new=STRING | ref=[STRING]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//new=STRING
		public Assignment getNewAssignment_1_0() { return cNewAssignment_1_0; }

		//STRING
		public RuleCall getNewSTRINGTerminalRuleCall_1_0_0() { return cNewSTRINGTerminalRuleCall_1_0_0; }

		//ref=[STRING]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//[STRING]
		public CrossReference getRefSTRINGCrossReference_1_1_0() { return cRefSTRINGCrossReference_1_1_0; }

		//ID
		public RuleCall getRefSTRINGIDTerminalRuleCall_1_1_0_1() { return cRefSTRINGIDTerminalRuleCall_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class DeleteAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpDeleteAttributeKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefEAttributeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefEAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cRefEAttributeCrossReference_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteAttribute:
		//	op="deleteAttribute(" ref=[ecore::EAttribute] ")";
		public ParserRule getRule() { return rule; }

		//op="deleteAttribute(" ref=[ecore::EAttribute] ")"
		public Group getGroup() { return cGroup; }

		//op="deleteAttribute("
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"deleteAttribute("
		public Keyword getOpDeleteAttributeKeyword_0_0() { return cOpDeleteAttributeKeyword_0_0; }

		//ref=[ecore::EAttribute]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ecore::EAttribute]
		public CrossReference getRefEAttributeCrossReference_1_0() { return cRefEAttributeCrossReference_1_0; }

		//ID
		public RuleCall getRefEAttributeIDTerminalRuleCall_1_0_1() { return cRefEAttributeIDTerminalRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class EReferenceOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EReferenceOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cReferenceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarReferenceParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cOpChangeReferenceParserRuleCall_1_0_0_0_0 = (RuleCall)cOpAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cOpAddReferenceParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_2 = (Assignment)cAlternatives_1_0_0.eContents().get(2);
		private final RuleCall cOpDeleteReferenceParserRuleCall_1_0_0_2_0 = (RuleCall)cOpAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cSettersAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cSettersSetterParserRuleCall_1_0_1_1_0 = (RuleCall)cSettersAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Assignment cComplexAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cComplexComplexOperatorParserRuleCall_1_1_0 = (RuleCall)cComplexAssignment_1_1.eContents().get(0);
		
		//EReferenceOperation:
		//	("reference" var=Reference "=")? ((op=ChangeReference | op=AddReference | op=DeleteReference) ("{" setters+=setter*
		//	"}") | complex+=ComplexOperator);
		public ParserRule getRule() { return rule; }

		//("reference" var=Reference "=")? ((op=ChangeReference | op=AddReference | op=DeleteReference) ("{" setters+=setter* "}")
		//| complex+=ComplexOperator)
		public Group getGroup() { return cGroup; }

		//("reference" var=Reference "=")?
		public Group getGroup_0() { return cGroup_0; }

		//"reference"
		public Keyword getReferenceKeyword_0_0() { return cReferenceKeyword_0_0; }

		//var=Reference
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Reference
		public RuleCall getVarReferenceParserRuleCall_0_1_0() { return cVarReferenceParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//(op=ChangeReference | op=AddReference | op=DeleteReference) ("{" setters+=setter* "}") | complex+=ComplexOperator
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//(op=ChangeReference | op=AddReference | op=DeleteReference) ("{" setters+=setter* "}")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//op=ChangeReference | op=AddReference | op=DeleteReference
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//op=ChangeReference
		public Assignment getOpAssignment_1_0_0_0() { return cOpAssignment_1_0_0_0; }

		//ChangeReference
		public RuleCall getOpChangeReferenceParserRuleCall_1_0_0_0_0() { return cOpChangeReferenceParserRuleCall_1_0_0_0_0; }

		//op=AddReference
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//AddReference
		public RuleCall getOpAddReferenceParserRuleCall_1_0_0_1_0() { return cOpAddReferenceParserRuleCall_1_0_0_1_0; }

		//op=DeleteReference
		public Assignment getOpAssignment_1_0_0_2() { return cOpAssignment_1_0_0_2; }

		//DeleteReference
		public RuleCall getOpDeleteReferenceParserRuleCall_1_0_0_2_0() { return cOpDeleteReferenceParserRuleCall_1_0_0_2_0; }

		//"{" setters+=setter* "}"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_1_0() { return cLeftCurlyBracketKeyword_1_0_1_0; }

		//setters+=setter*
		public Assignment getSettersAssignment_1_0_1_1() { return cSettersAssignment_1_0_1_1; }

		//setter
		public RuleCall getSettersSetterParserRuleCall_1_0_1_1_0() { return cSettersSetterParserRuleCall_1_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_1_2() { return cRightCurlyBracketKeyword_1_0_1_2; }

		//complex+=ComplexOperator
		public Assignment getComplexAssignment_1_1() { return cComplexAssignment_1_1; }

		//ComplexOperator
		public RuleCall getComplexComplexOperatorParserRuleCall_1_1_0() { return cComplexComplexOperatorParserRuleCall_1_1_0; }
	}

	public class ChangeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpChangeReferenceKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefEReferenceCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cRefEReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChangeReference:
		//	op="changeReference" "(" ref=[ecore::EReference] ")";
		public ParserRule getRule() { return rule; }

		//op="changeReference" "(" ref=[ecore::EReference] ")"
		public Group getGroup() { return cGroup; }

		//op="changeReference"
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"changeReference"
		public Keyword getOpChangeReferenceKeyword_0_0() { return cOpChangeReferenceKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=[ecore::EReference]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[ecore::EReference]
		public CrossReference getRefEReferenceCrossReference_2_0() { return cRefEReferenceCrossReference_2_0; }

		//ID
		public RuleCall getRefEReferenceIDTerminalRuleCall_2_0_1() { return cRefEReferenceIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AddReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpAddReferenceKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNewAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNewSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cNewAssignment_2_0.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cRefSTRINGCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefSTRINGIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefSTRINGCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AddReference:
		//	op="addReference" "(" (new=STRING | ref=[STRING]) ")";
		public ParserRule getRule() { return rule; }

		//op="addReference" "(" (new=STRING | ref=[STRING]) ")"
		public Group getGroup() { return cGroup; }

		//op="addReference"
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"addReference"
		public Keyword getOpAddReferenceKeyword_0_0() { return cOpAddReferenceKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//new=STRING | ref=[STRING]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//new=STRING
		public Assignment getNewAssignment_2_0() { return cNewAssignment_2_0; }

		//STRING
		public RuleCall getNewSTRINGTerminalRuleCall_2_0_0() { return cNewSTRINGTerminalRuleCall_2_0_0; }

		//ref=[STRING]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }

		//[STRING]
		public CrossReference getRefSTRINGCrossReference_2_1_0() { return cRefSTRINGCrossReference_2_1_0; }

		//ID
		public RuleCall getRefSTRINGIDTerminalRuleCall_2_1_0_1() { return cRefSTRINGIDTerminalRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DeleteReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpDeleteReferenceKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefEReferenceCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cRefEReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeleteReference:
		//	op="deleteReference" "(" ref=[ecore::EReference] ")";
		public ParserRule getRule() { return rule; }

		//op="deleteReference" "(" ref=[ecore::EReference] ")"
		public Group getGroup() { return cGroup; }

		//op="deleteReference"
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"deleteReference"
		public Keyword getOpDeleteReferenceKeyword_0_0() { return cOpDeleteReferenceKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=[ecore::EReference]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[ecore::EReference]
		public CrossReference getRefEReferenceCrossReference_2_0() { return cRefEReferenceCrossReference_2_0; }

		//ID
		public RuleCall getRefEReferenceIDTerminalRuleCall_2_0_1() { return cRefEReferenceIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ComplexOperatorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexOperatorDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cPackageOperationsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cPackageOperationsEPackageOperationParserRuleCall_4_0_0 = (RuleCall)cPackageOperationsAssignment_4_0.eContents().get(0);
		private final Assignment cClassOperationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cClassOperationsEClassOperationParserRuleCall_4_1_0 = (RuleCall)cClassOperationsAssignment_4_1.eContents().get(0);
		private final Assignment cAttributeOperationsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cAttributeOperationsEAttributeOperationParserRuleCall_4_2_0 = (RuleCall)cAttributeOperationsAssignment_4_2.eContents().get(0);
		private final Assignment cReferenceOperationsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cReferenceOperationsEReferenceOperationParserRuleCall_4_3_0 = (RuleCall)cReferenceOperationsAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComplexOperatorDef:
		//	"def change" name=ID ("(" params+=Parameter? ("," params+=Parameter)* ")") "{" (packageOperations+=EPackageOperation |
		//	classOperations+=EClassOperation | attributeOperations+=EAttributeOperation |
		//	referenceOperations+=EReferenceOperation)* "}";
		public ParserRule getRule() { return rule; }

		//"def change" name=ID ("(" params+=Parameter? ("," params+=Parameter)* ")") "{" (packageOperations+=EPackageOperation |
		//classOperations+=EClassOperation | attributeOperations+=EAttributeOperation |
		//referenceOperations+=EReferenceOperation)* "}"
		public Group getGroup() { return cGroup; }

		//"def change"
		public Keyword getDefChangeKeyword_0() { return cDefChangeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"(" params+=Parameter? ("," params+=Parameter)* ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=Parameter?
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_1_0() { return cParamsParameterParserRuleCall_2_1_0; }

		//("," params+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_1_0() { return cParamsParameterParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(packageOperations+=EPackageOperation | classOperations+=EClassOperation | attributeOperations+=EAttributeOperation |
		//referenceOperations+=EReferenceOperation)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//packageOperations+=EPackageOperation
		public Assignment getPackageOperationsAssignment_4_0() { return cPackageOperationsAssignment_4_0; }

		//EPackageOperation
		public RuleCall getPackageOperationsEPackageOperationParserRuleCall_4_0_0() { return cPackageOperationsEPackageOperationParserRuleCall_4_0_0; }

		//classOperations+=EClassOperation
		public Assignment getClassOperationsAssignment_4_1() { return cClassOperationsAssignment_4_1; }

		//EClassOperation
		public RuleCall getClassOperationsEClassOperationParserRuleCall_4_1_0() { return cClassOperationsEClassOperationParserRuleCall_4_1_0; }

		//attributeOperations+=EAttributeOperation
		public Assignment getAttributeOperationsAssignment_4_2() { return cAttributeOperationsAssignment_4_2; }

		//EAttributeOperation
		public RuleCall getAttributeOperationsEAttributeOperationParserRuleCall_4_2_0() { return cAttributeOperationsEAttributeOperationParserRuleCall_4_2_0; }

		//referenceOperations+=EReferenceOperation
		public Assignment getReferenceOperationsAssignment_4_3() { return cReferenceOperationsAssignment_4_3; }

		//EReferenceOperation
		public RuleCall getReferenceOperationsEReferenceOperationParserRuleCall_4_3_0() { return cReferenceOperationsEReferenceOperationParserRuleCall_4_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ComplexOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefComplexOperatorDefCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefComplexOperatorDefIDTerminalRuleCall_0_0_1 = (RuleCall)cRefComplexOperatorDefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cArgsEObjectCrossReference_2_0_0 = (CrossReference)cArgsAssignment_2_0.eContents().get(0);
		private final RuleCall cArgsEObjectIDTerminalRuleCall_2_0_0_1 = (RuleCall)cArgsEObjectCrossReference_2_0_0.eContents().get(1);
		private final Assignment cNewAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNewSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cNewAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cArgsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final CrossReference cArgsEObjectCrossReference_3_1_0_0 = (CrossReference)cArgsAssignment_3_1_0.eContents().get(0);
		private final RuleCall cArgsEObjectIDTerminalRuleCall_3_1_0_0_1 = (RuleCall)cArgsEObjectCrossReference_3_1_0_0.eContents().get(1);
		private final Assignment cNewAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cNewSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cNewAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComplexOperator:
		//	ref=[ComplexOperatorDef] "(" (args+=[ecore::EObject] | new+=STRING)? ("," (args+=[ecore::EObject] | new+=STRING))* ")"
		//	";";
		public ParserRule getRule() { return rule; }

		//ref=[ComplexOperatorDef] "(" (args+=[ecore::EObject] | new+=STRING)? ("," (args+=[ecore::EObject] | new+=STRING))* ")"
		//";"
		public Group getGroup() { return cGroup; }

		//ref=[ComplexOperatorDef]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ComplexOperatorDef]
		public CrossReference getRefComplexOperatorDefCrossReference_0_0() { return cRefComplexOperatorDefCrossReference_0_0; }

		//ID
		public RuleCall getRefComplexOperatorDefIDTerminalRuleCall_0_0_1() { return cRefComplexOperatorDefIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=[ecore::EObject] | new+=STRING)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//args+=[ecore::EObject]
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//[ecore::EObject]
		public CrossReference getArgsEObjectCrossReference_2_0_0() { return cArgsEObjectCrossReference_2_0_0; }

		//ID
		public RuleCall getArgsEObjectIDTerminalRuleCall_2_0_0_1() { return cArgsEObjectIDTerminalRuleCall_2_0_0_1; }

		//new+=STRING
		public Assignment getNewAssignment_2_1() { return cNewAssignment_2_1; }

		//STRING
		public RuleCall getNewSTRINGTerminalRuleCall_2_1_0() { return cNewSTRINGTerminalRuleCall_2_1_0; }

		//("," (args+=[ecore::EObject] | new+=STRING))*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//args+=[ecore::EObject] | new+=STRING
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//args+=[ecore::EObject]
		public Assignment getArgsAssignment_3_1_0() { return cArgsAssignment_3_1_0; }

		//[ecore::EObject]
		public CrossReference getArgsEObjectCrossReference_3_1_0_0() { return cArgsEObjectCrossReference_3_1_0_0; }

		//ID
		public RuleCall getArgsEObjectIDTerminalRuleCall_3_1_0_0_1() { return cArgsEObjectIDTerminalRuleCall_3_1_0_0_1; }

		//new+=STRING
		public Assignment getNewAssignment_3_1_1() { return cNewAssignment_3_1_1; }

		//STRING
		public RuleCall getNewSTRINGTerminalRuleCall_3_1_1_0() { return cNewSTRINGTerminalRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cClassParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cClassKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cReferenceKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPackageParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cPackageKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cAttributeParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cAttributeKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanDefParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cBoolKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cIntDefParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cIntKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cStringDefParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cStringKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Parameter returns ecore::EObject:
		//	Class ":" "class" | Reference ":" "reference" | Package ":" "package" | Attribute ":" "attribute" | BooleanDef ":"
		//	"bool" | IntDef ":" "int" | StringDef ":" "string";
		public ParserRule getRule() { return rule; }

		//Class ":" "class" | Reference ":" "reference" | Package ":" "package" | Attribute ":" "attribute" | BooleanDef ":"
		//"bool" | IntDef ":" "int" | StringDef ":" "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Class ":" "class"
		public Group getGroup_0() { return cGroup_0; }

		//Class
		public RuleCall getClassParserRuleCall_0_0() { return cClassParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"class"
		public Keyword getClassKeyword_0_2() { return cClassKeyword_0_2; }

		//Reference ":" "reference"
		public Group getGroup_1() { return cGroup_1; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1_0() { return cReferenceParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//"reference"
		public Keyword getReferenceKeyword_1_2() { return cReferenceKeyword_1_2; }

		//Package ":" "package"
		public Group getGroup_2() { return cGroup_2; }

		//Package
		public RuleCall getPackageParserRuleCall_2_0() { return cPackageParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//"package"
		public Keyword getPackageKeyword_2_2() { return cPackageKeyword_2_2; }

		//Attribute ":" "attribute"
		public Group getGroup_3() { return cGroup_3; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_3_0() { return cAttributeParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//"attribute"
		public Keyword getAttributeKeyword_3_2() { return cAttributeKeyword_3_2; }

		//BooleanDef ":" "bool"
		public Group getGroup_4() { return cGroup_4; }

		//BooleanDef
		public RuleCall getBooleanDefParserRuleCall_4_0() { return cBooleanDefParserRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//"bool"
		public Keyword getBoolKeyword_4_2() { return cBoolKeyword_4_2; }

		//IntDef ":" "int"
		public Group getGroup_5() { return cGroup_5; }

		//IntDef
		public RuleCall getIntDefParserRuleCall_5_0() { return cIntDefParserRuleCall_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//"int"
		public Keyword getIntKeyword_5_2() { return cIntKeyword_5_2; }

		//StringDef ":" "string"
		public Group getGroup_6() { return cGroup_6; }

		//StringDef
		public RuleCall getStringDefParserRuleCall_6_0() { return cStringDefParserRuleCall_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//"string"
		public Keyword getStringKeyword_6_2() { return cStringKeyword_6_2; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attribute returns ecore::EAttribute:
		//	{Attribute} name=ID;
		public ParserRule getRule() { return rule; }

		//{Attribute} name=ID
		public Group getGroup() { return cGroup; }

		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Reference returns ecore::EReference:
		//	{Reference} name=ID;
		public ParserRule getRule() { return rule; }

		//{Reference} name=ID
		public Group getGroup() { return cGroup; }

		//{Reference}
		public Action getReferenceAction_0() { return cReferenceAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class BooleanDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BooleanDef returns BOOL:
		//	{BooleanDef} name=ID;
		public ParserRule getRule() { return rule; }

		//{BooleanDef} name=ID
		public Group getGroup() { return cGroup; }

		//{BooleanDef}
		public Action getBooleanDefAction_0() { return cBooleanDefAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class StringDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringDef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StringDef returns STRING:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class IntDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IntDef returns INT:
		//	{IntDef} name=ID;
		public ParserRule getRule() { return rule; }

		//{IntDef} name=ID
		public Group getGroup() { return cGroup; }

		//{IntDef}
		public Action getIntDefAction_0() { return cIntDefAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private ModelElements pModel;
	private EPackageOperationElements pEPackageOperation;
	private DeletePackageElements pDeletePackage;
	private AddPackageElements pAddPackage;
	private ChangePackageElements pChangePackage;
	private PackageElements pPackage;
	private EClassOperationElements pEClassOperation;
	private ChangeClassElements pChangeClass;
	private AddClassElements pAddClass;
	private DeleteClassElements pDeleteClass;
	private ClassElements pClass;
	private SetterElements pSetter;
	private CardinalityElements pCardinality;
	private EAttributeOperationElements pEAttributeOperation;
	private ChangeAttributeElements pChangeAttribute;
	private AddAttributeElements pAddAttribute;
	private DeleteAttributeElements pDeleteAttribute;
	private EReferenceOperationElements pEReferenceOperation;
	private ChangeReferenceElements pChangeReference;
	private AddReferenceElements pAddReference;
	private DeleteReferenceElements pDeleteReference;
	private ComplexOperatorDefElements pComplexOperatorDef;
	private ComplexOperatorElements pComplexOperator;
	private ParameterElements pParameter;
	private AttributeElements pAttribute;
	private ReferenceElements pReference;
	private BooleanDefElements pBooleanDef;
	private StringDefElements pStringDef;
	private IntDefElements pIntDef;
	private TerminalRule tBOOL;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EDeltaLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	packages+=(EPackageOperation | ComplexOperatorDef)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//EPackageOperation:
	//	("package" var=Package "=")? (op=(ChangePackage | AddPackage | DeletePackage) "{" (setters+=setter |
	//	classes+=EClassOperation)* "}" | complex+=ComplexOperator);
	public EPackageOperationElements getEPackageOperationAccess() {
		return (pEPackageOperation != null) ? pEPackageOperation : (pEPackageOperation = new EPackageOperationElements());
	}
	
	public ParserRule getEPackageOperationRule() {
		return getEPackageOperationAccess().getRule();
	}

	//DeletePackage:
	//	"deletePackage" "(" ref=[ecore::EPackage] ")";
	public DeletePackageElements getDeletePackageAccess() {
		return (pDeletePackage != null) ? pDeletePackage : (pDeletePackage = new DeletePackageElements());
	}
	
	public ParserRule getDeletePackageRule() {
		return getDeletePackageAccess().getRule();
	}

	//AddPackage:
	//	"addPackage" "(" (new=STRING | ref=[STRING]) ")";
	public AddPackageElements getAddPackageAccess() {
		return (pAddPackage != null) ? pAddPackage : (pAddPackage = new AddPackageElements());
	}
	
	public ParserRule getAddPackageRule() {
		return getAddPackageAccess().getRule();
	}

	//ChangePackage:
	//	"changePackage" "(" ref=[ecore::EPackage] ")";
	public ChangePackageElements getChangePackageAccess() {
		return (pChangePackage != null) ? pChangePackage : (pChangePackage = new ChangePackageElements());
	}
	
	public ParserRule getChangePackageRule() {
		return getChangePackageAccess().getRule();
	}

	//Package returns ecore::EPackage:
	//	{Package} name=ID;
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//EClassOperation:
	//	("class" var=Class "=")? ((op=ChangeClass | op=AddClass | op=DeleteClass) ("{" (setters+=setter |
	//	attributes+=EAttributeOperation | references+=EReferenceOperation)* "}" | complex+=ComplexOperator));
	public EClassOperationElements getEClassOperationAccess() {
		return (pEClassOperation != null) ? pEClassOperation : (pEClassOperation = new EClassOperationElements());
	}
	
	public ParserRule getEClassOperationRule() {
		return getEClassOperationAccess().getRule();
	}

	//ChangeClass:
	//	{ChangeClass} op="changeClass(" ref=[ecore::EClass] ")";
	public ChangeClassElements getChangeClassAccess() {
		return (pChangeClass != null) ? pChangeClass : (pChangeClass = new ChangeClassElements());
	}
	
	public ParserRule getChangeClassRule() {
		return getChangeClassAccess().getRule();
	}

	//AddClass:
	//	op="addClass(" (new=STRING | ref=[STRING]) ")";
	public AddClassElements getAddClassAccess() {
		return (pAddClass != null) ? pAddClass : (pAddClass = new AddClassElements());
	}
	
	public ParserRule getAddClassRule() {
		return getAddClassAccess().getRule();
	}

	//DeleteClass:
	//	op="deleteClass(" ref=[ecore::EClass] ")";
	public DeleteClassElements getDeleteClassAccess() {
		return (pDeleteClass != null) ? pDeleteClass : (pDeleteClass = new DeleteClassElements());
	}
	
	public ParserRule getDeleteClassRule() {
		return getDeleteClassAccess().getRule();
	}

	//Class returns ecore::EClass:
	//	{Class} name=ID;
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//setter:
	//	"set" metafeature=[ecore::EStructuralFeature] operator="<=" ((value=STRING | BOOL) | card=Cardinality |
	//	valueRef+=[ecore::EObject]) ("," valueRef+=[ecore::EObject])* ";";
	public SetterElements getSetterAccess() {
		return (pSetter != null) ? pSetter : (pSetter = new SetterElements());
	}
	
	public ParserRule getSetterRule() {
		return getSetterAccess().getRule();
	}

	//Cardinality returns ecore::EInt:
	//	INT | "*";
	public CardinalityElements getCardinalityAccess() {
		return (pCardinality != null) ? pCardinality : (pCardinality = new CardinalityElements());
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//EAttributeOperation:
	//	("attribute" var=Attribute "=")? ((op=ChangeAttribute | op=AddAttribute | op=DeleteAttribute) ("{" setters+=setter*
	//	"}") | complex+=ComplexOperator);
	public EAttributeOperationElements getEAttributeOperationAccess() {
		return (pEAttributeOperation != null) ? pEAttributeOperation : (pEAttributeOperation = new EAttributeOperationElements());
	}
	
	public ParserRule getEAttributeOperationRule() {
		return getEAttributeOperationAccess().getRule();
	}

	//ChangeAttribute:
	//	op="changeAttribute(" ref=[ecore::EAttribute] ")";
	public ChangeAttributeElements getChangeAttributeAccess() {
		return (pChangeAttribute != null) ? pChangeAttribute : (pChangeAttribute = new ChangeAttributeElements());
	}
	
	public ParserRule getChangeAttributeRule() {
		return getChangeAttributeAccess().getRule();
	}

	//AddAttribute:
	//	op="addAttribute(" (new=STRING | ref=[STRING]) ")";
	public AddAttributeElements getAddAttributeAccess() {
		return (pAddAttribute != null) ? pAddAttribute : (pAddAttribute = new AddAttributeElements());
	}
	
	public ParserRule getAddAttributeRule() {
		return getAddAttributeAccess().getRule();
	}

	//DeleteAttribute:
	//	op="deleteAttribute(" ref=[ecore::EAttribute] ")";
	public DeleteAttributeElements getDeleteAttributeAccess() {
		return (pDeleteAttribute != null) ? pDeleteAttribute : (pDeleteAttribute = new DeleteAttributeElements());
	}
	
	public ParserRule getDeleteAttributeRule() {
		return getDeleteAttributeAccess().getRule();
	}

	//EReferenceOperation:
	//	("reference" var=Reference "=")? ((op=ChangeReference | op=AddReference | op=DeleteReference) ("{" setters+=setter*
	//	"}") | complex+=ComplexOperator);
	public EReferenceOperationElements getEReferenceOperationAccess() {
		return (pEReferenceOperation != null) ? pEReferenceOperation : (pEReferenceOperation = new EReferenceOperationElements());
	}
	
	public ParserRule getEReferenceOperationRule() {
		return getEReferenceOperationAccess().getRule();
	}

	//ChangeReference:
	//	op="changeReference" "(" ref=[ecore::EReference] ")";
	public ChangeReferenceElements getChangeReferenceAccess() {
		return (pChangeReference != null) ? pChangeReference : (pChangeReference = new ChangeReferenceElements());
	}
	
	public ParserRule getChangeReferenceRule() {
		return getChangeReferenceAccess().getRule();
	}

	//AddReference:
	//	op="addReference" "(" (new=STRING | ref=[STRING]) ")";
	public AddReferenceElements getAddReferenceAccess() {
		return (pAddReference != null) ? pAddReference : (pAddReference = new AddReferenceElements());
	}
	
	public ParserRule getAddReferenceRule() {
		return getAddReferenceAccess().getRule();
	}

	//DeleteReference:
	//	op="deleteReference" "(" ref=[ecore::EReference] ")";
	public DeleteReferenceElements getDeleteReferenceAccess() {
		return (pDeleteReference != null) ? pDeleteReference : (pDeleteReference = new DeleteReferenceElements());
	}
	
	public ParserRule getDeleteReferenceRule() {
		return getDeleteReferenceAccess().getRule();
	}

	//ComplexOperatorDef:
	//	"def change" name=ID ("(" params+=Parameter? ("," params+=Parameter)* ")") "{" (packageOperations+=EPackageOperation |
	//	classOperations+=EClassOperation | attributeOperations+=EAttributeOperation |
	//	referenceOperations+=EReferenceOperation)* "}";
	public ComplexOperatorDefElements getComplexOperatorDefAccess() {
		return (pComplexOperatorDef != null) ? pComplexOperatorDef : (pComplexOperatorDef = new ComplexOperatorDefElements());
	}
	
	public ParserRule getComplexOperatorDefRule() {
		return getComplexOperatorDefAccess().getRule();
	}

	//ComplexOperator:
	//	ref=[ComplexOperatorDef] "(" (args+=[ecore::EObject] | new+=STRING)? ("," (args+=[ecore::EObject] | new+=STRING))* ")"
	//	";";
	public ComplexOperatorElements getComplexOperatorAccess() {
		return (pComplexOperator != null) ? pComplexOperator : (pComplexOperator = new ComplexOperatorElements());
	}
	
	public ParserRule getComplexOperatorRule() {
		return getComplexOperatorAccess().getRule();
	}

	//Parameter returns ecore::EObject:
	//	Class ":" "class" | Reference ":" "reference" | Package ":" "package" | Attribute ":" "attribute" | BooleanDef ":"
	//	"bool" | IntDef ":" "int" | StringDef ":" "string";
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Attribute returns ecore::EAttribute:
	//	{Attribute} name=ID;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Reference returns ecore::EReference:
	//	{Reference} name=ID;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//BooleanDef returns BOOL:
	//	{BooleanDef} name=ID;
	public BooleanDefElements getBooleanDefAccess() {
		return (pBooleanDef != null) ? pBooleanDef : (pBooleanDef = new BooleanDefElements());
	}
	
	public ParserRule getBooleanDefRule() {
		return getBooleanDefAccess().getRule();
	}

	//StringDef returns STRING:
	//	name=ID;
	public StringDefElements getStringDefAccess() {
		return (pStringDef != null) ? pStringDef : (pStringDef = new StringDefElements());
	}
	
	public ParserRule getStringDefRule() {
		return getStringDefAccess().getRule();
	}

	//IntDef returns INT:
	//	{IntDef} name=ID;
	public IntDefElements getIntDefAccess() {
		return (pIntDef != null) ? pIntDef : (pIntDef = new IntDefElements());
	}
	
	public ParserRule getIntDefRule() {
		return getIntDefAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
